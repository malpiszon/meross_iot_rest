name: Build and publish docker image

on:
  workflow_dispatch:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  schedule:
    - cron: '0 10 * * *'

env:
  REGISTRY: ghcr.io
  BUILD_ARGS: |
    "PYTHON_IMAGE_VERSION=${{ vars.PYTHON_IMAGE_VERSION }}"

jobs:
  build:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log into Docker Hub
        id: docker-hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get MerossIot version
        id: lib-version
        shell: bash
        run: |
            endpoint='https://api.github.com/repos/albertogeniola/MerossIot/releases/latest';
            lib_summary=$(curl -s "${endpoint}");
            version=$(echo "${lib_summary}" | jq '{"name"} | .name' | tr -d '"' | awk '{print $2}');
            echo "merossiot_version=${version}" >> $GITHUB_OUTPUT
          
      - name: Get latest package version
        id: package-version
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          lib_version=${{ steps.lib-version.outputs.merossiot_version }}
          endpoint='/users/malpiszon/packages/container/meross_iot_rest/versions';
          package_summary=$(gh api "${endpoint}");
          package_for_version_exists=$(echo "${package_summary}" | jq '.[0].metadata.container.tags' | { grep -c "${lib_version}" || true; } );
          echo "package_exists=${package_for_version_exists}" >> $GITHUB_OUTPUT

      - name: Extract Docker metadata
        if: ${{ (github.event_name != 'schedule') || (steps.package-version.outputs.package_exists == '0') }}
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ vars.DOCKERHUB_IMAGE_NAME }}
            ${{ env.REGISTRY }}/${{ github.repository }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=merossiot-${{ steps.lib-version.outputs.merossiot_version }}
            type=raw,value=python-${{ vars.PYTHON_IMAGE_VERSION }}

      - name: Build and push
        if: ${{ (github.event_name != 'schedule') || (steps.package-version.outputs.package_exists == '0') }}
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          build-args: |
            ${{ env.BUILD_ARGS }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=image,name=target,annotation-index.org.opencontainers.image.description=RESTed (Flask with Waitress) example of MerosIot library
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Delete all untagged packages
        uses: actions/delete-package-versions@v5
        with:
          package-name: ${{ github.event.repository.name }}
          package-type: 'container'
          min-versions-to-keep: 0
          delete-only-untagged-versions: 'true'

      - name: Generate build summary
        run: |
          MEROSS_IOT_VERSION=${{ steps.lib-version.outputs.merossiot_version }}
          PYTHON_IMAGE_VERSION=${{ vars.PYTHON_IMAGE_VERSION }}
          RUN_TYPE=${{ github.event_name }}
          NEW_VERSION_PACKAGE=${{ steps.package-version.outputs.package_exists == '0' }}
          NEW_PACKAGE_BUILT=${{ (github.event_name != 'schedule') || (steps.package-version.outputs.package_exists == '0') }}
          echo "### Build variables:"
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- MerossIot lib version: ${MEROSS_IOT_VERSION}" >> $GITHUB_STEP_SUMMARY
          echo "- Python image version: ${PYTHON_IMAGE_VERSION}" >> $GITHUB_STEP_SUMMARY
          echo "- Run type: ${RUN_TYPE}" >> $GITHUB_STEP_SUMMARY
          echo "- Build for the new lib version: ${NEW_VERSION_PACKAGE}" >> $GITHUB_STEP_SUMMARY
          echo "- New package built and pushed: ${NEW_PACKAGE_BUILT}" >> $GITHUB_STEP_SUMMARY
